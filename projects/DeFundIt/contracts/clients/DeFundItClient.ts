/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "sendFunding(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "SendFundToBeneficiary()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getBeneficiaryAddress()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "minimumFunding": {
          "type": "uint64",
          "key": "minimumFunding"
        },
        "fundingTarget": {
          "type": "uint64",
          "key": "fundingTarget"
        },
        "beneficiaryAddress": {
          "type": "bytes",
          "key": "beneficiaryAddress"
        },
        "funds": {
          "type": "uint64",
          "key": "funds"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "DeFundIt",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Initializes the DeFundIt application with the provided beneficiary address.",
        "args": [
          {
            "name": "addr",
            "type": "address",
            "desc": "The Algorand address of the beneficiary."
          }
        ],
        "returns": {
          "type": "void",
          "desc": "void"
        }
      },
      {
        "name": "sendFunding",
        "desc": "Processes a payment transaction and updates the funds in the DeFundIt application.",
        "args": [
          {
            "name": "senderTxn",
            "type": "pay",
            "desc": "The payment transaction to be processed."
          }
        ],
        "returns": {
          "type": "void",
          "desc": "void"
        }
      },
      {
        "name": "SendFundToBeneficiary",
        "desc": "Transfers the funds to the beneficiary address if the total funds match the funding target.",
        "args": [],
        "returns": {
          "type": "void",
          "desc": "void"
        }
      },
      {
        "name": "getBeneficiaryAddress",
        "desc": "Retrieves the beneficiary address associated with the DeFundIt application.",
        "args": [],
        "returns": {
          "type": "address",
          "desc": "Address - The Algorand address of the beneficiary."
        }
      },
      {
        "name": "deleteApplication",
        "desc": "Deletes the DeFundIt application from the Algorand blockchain.",
        "args": [],
        "returns": {
          "type": "void",
          "desc": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the DeFundIt smart contract.
 */
export type DeFundIt = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address)void' | 'createApplication', {
      argsObj: {
        /**
         * The Algorand address of the beneficiary.
         */
        addr: string
      }
      argsTuple: [addr: string]
      /**
       * void
       */
      returns: void
    }>
    & Record<'sendFunding(pay)void' | 'sendFunding', {
      argsObj: {
        /**
         * The payment transaction to be processed.
         */
        senderTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [senderTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      /**
       * void
       */
      returns: void
    }>
    & Record<'SendFundToBeneficiary()void' | 'SendFundToBeneficiary', {
      argsObj: {
      }
      argsTuple: []
      /**
       * void
       */
      returns: void
    }>
    & Record<'getBeneficiaryAddress()address' | 'getBeneficiaryAddress', {
      argsObj: {
      }
      argsTuple: []
      /**
       * Address - The Algorand address of the beneficiary.
       */
      returns: string
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      /**
       * void
       */
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'minimumFunding'?: IntegerState
      'fundingTarget'?: IntegerState
      'beneficiaryAddress'?: BinaryState
      'funds'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type DeFundItSig = keyof DeFundIt['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends DeFundItSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the DeFundIt smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends DeFundItSig> = DeFundIt['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DeFundIt smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DeFundItSig> = DeFundIt['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type DeFundItCreateCalls = (typeof DeFundItCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type DeFundItCreateCallParams =
  | (TypedCallParams<'createApplication(address)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type DeFundItDeleteCalls = (typeof DeFundItCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type DeFundItDeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type DeFundItDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: DeFundItCreateCalls) => DeFundItCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: DeFundItDeleteCalls) => DeFundItDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class DeFundItCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the DeFundIt smart contract using the createApplication(address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.addr],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the DeFundIt smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the sendFunding(pay)void ABI method
   *
   * Processes a payment transaction and updates the funds in the DeFundIt application.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendFunding(args: MethodArgs<'sendFunding(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendFunding(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.senderTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the SendFundToBeneficiary()void ABI method
   *
   * Transfers the funds to the beneficiary address if the total funds match the funding target.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendFundToBeneficiary(args: MethodArgs<'SendFundToBeneficiary()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'SendFundToBeneficiary()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getBeneficiaryAddress()address ABI method
   *
   * Retrieves the beneficiary address associated with the DeFundIt application.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getBeneficiaryAddress(args: MethodArgs<'getBeneficiaryAddress()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getBeneficiaryAddress()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the DeFundIt smart contract
 */
export class DeFundItClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `DeFundItClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof DeFundIt['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the DeFundIt smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: DeFundItDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(DeFundItCallFactory.create)
    const deleteArgs = params.deleteCall?.(DeFundItCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the DeFundIt smart contract using the createApplication(address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result: void
       */
      async createApplication(args: MethodArgs<'createApplication(address)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(address)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(DeFundItCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the DeFundIt smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result: void
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(await $this.appClient.delete(DeFundItCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the DeFundIt smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the sendFunding(pay)void ABI method.
   *
   * Processes a payment transaction and updates the funds in the DeFundIt application.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: void
   */
  public sendFunding(args: MethodArgs<'sendFunding(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DeFundItCallFactory.sendFunding(args, params))
  }

  /**
   * Calls the SendFundToBeneficiary()void ABI method.
   *
   * Transfers the funds to the beneficiary address if the total funds match the funding target.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: void
   */
  public sendFundToBeneficiary(args: MethodArgs<'SendFundToBeneficiary()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DeFundItCallFactory.sendFundToBeneficiary(args, params))
  }

  /**
   * Calls the getBeneficiaryAddress()address ABI method.
   *
   * Retrieves the beneficiary address associated with the DeFundIt application.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Address - The Algorand address of the beneficiary.
   */
  public getBeneficiaryAddress(args: MethodArgs<'getBeneficiaryAddress()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DeFundItCallFactory.getBeneficiaryAddress(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<DeFundIt['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get minimumFunding() {
        return DeFundItClient.getIntegerState(state, 'minimumFunding')
      },
      get fundingTarget() {
        return DeFundItClient.getIntegerState(state, 'fundingTarget')
      },
      get beneficiaryAddress() {
        return DeFundItClient.getBinaryState(state, 'beneficiaryAddress')
      },
      get funds() {
        return DeFundItClient.getIntegerState(state, 'funds')
      },
    }
  }

  public compose(): DeFundItComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      sendFunding(args: MethodArgs<'sendFunding(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendFunding(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendFundToBeneficiary(args: MethodArgs<'SendFundToBeneficiary()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendFundToBeneficiary(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getBeneficiaryAddress(args: MethodArgs<'getBeneficiaryAddress()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getBeneficiaryAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as DeFundItComposer
  }
}
export type DeFundItComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the sendFunding(pay)void ABI method.
   *
   * Processes a payment transaction and updates the funds in the DeFundIt application.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendFunding(args: MethodArgs<'sendFunding(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DeFundItComposer<[...TReturns, MethodReturn<'sendFunding(pay)void'>]>

  /**
   * Calls the SendFundToBeneficiary()void ABI method.
   *
   * Transfers the funds to the beneficiary address if the total funds match the funding target.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendFundToBeneficiary(args: MethodArgs<'SendFundToBeneficiary()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DeFundItComposer<[...TReturns, MethodReturn<'SendFundToBeneficiary()void'>]>

  /**
   * Calls the getBeneficiaryAddress()address ABI method.
   *
   * Retrieves the beneficiary address associated with the DeFundIt application.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBeneficiaryAddress(args: MethodArgs<'getBeneficiaryAddress()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DeFundItComposer<[...TReturns, MethodReturn<'getBeneficiaryAddress()address'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the DeFundIt smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams): DeFundItComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DeFundIt smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): DeFundItComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): DeFundItComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<DeFundItComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<DeFundItComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type DeFundItComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type DeFundItComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
