#pragma version 10

// This TEAL was generated by TEALScript v0.103.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(address,uint64)void
*abi_route_createApplication:
	// fundingTarget: uint64
	txna ApplicationArgs 2
	btoi

	// addr: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (addr) for createApplication must be a address
	assert

	// execute createApplication(address,uint64)void
	callsub createApplication
	int 1
	return

// createApplication(addr: Address, fundingTarget: uint64): void
//
// Initializes the DeFundIt application with the provided beneficiary address.
//
// @param addr - The Algorand address of the beneficiary.
//
// @remarks
// This function sets the minimum funding amount to 1 Algo, the funding target to 10,000,000 Algo,
// and initializes the funds to 0 Algo. The beneficiary address is set to the provided address.
//
// @returns {void}
createApplication:
	proto 2 0

	// contracts/DeFundIt.algo.ts:24
	// this.minimumFunding.value = 1
	byte 0x6d696e696d756d46756e64696e67 // "minimumFunding"
	int 1
	app_global_put

	// contracts/DeFundIt.algo.ts:25
	// this.fundingTarget.value = fundingTarget
	byte 0x66756e64696e67546172676574 // "fundingTarget"
	frame_dig -2 // fundingTarget: uint64
	app_global_put

	// contracts/DeFundIt.algo.ts:26
	// this.beneficiaryAddress.value = addr
	byte 0x62656e656669636961727941646472657373 // "beneficiaryAddress"
	frame_dig -1 // addr: Address
	app_global_put

	// contracts/DeFundIt.algo.ts:27
	// this.funds.value = 0
	byte 0x66756e6473 // "funds"
	int 0
	app_global_put
	retsub

// sendFunding(pay)void
*abi_route_sendFunding:
	// senderTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 0 (senderTxn) for sendFunding must be a pay transaction
	assert

	// execute sendFunding(pay)void
	callsub sendFunding
	int 1
	return

// sendFunding(senderTxn: PayTxn): void
//
// Processes a payment transaction and updates the funds in the DeFundIt application.
//
// @param senderTxn - The payment transaction to be processed.
//
// @remarks
// This function verifies the payment transaction, checks if the amount is greater than or equal to the minimum funding amount,
// and ensures that the total funds after the transaction do not exceed the funding target.
// If the conditions are met, the function updates the funds in the application.
//
// @returns {void}
sendFunding:
	proto 1 0

	// contracts/DeFundIt.algo.ts:43
	// assert(senderTxn.amount >= this.minimumFunding.value, 'quantity must be >= this.minimumFunding.value')
	frame_dig -1 // senderTxn: PayTxn
	gtxns Amount
	byte 0x6d696e696d756d46756e64696e67 // "minimumFunding"
	app_global_get
	>=

	// quantity must be >= this.minimumFunding.value
	assert

	// contracts/DeFundIt.algo.ts:44
	// assert(this.funds.value + senderTxn.amount <= this.fundingTarget.value, 'funding target must be higher than funds')
	byte 0x66756e6473 // "funds"
	app_global_get
	frame_dig -1 // senderTxn: PayTxn
	gtxns Amount
	+
	byte 0x66756e64696e67546172676574 // "fundingTarget"
	app_global_get
	<=

	// funding target must be higher than funds
	assert

	// contracts/DeFundIt.algo.ts:46
	// verifyPayTxn(senderTxn, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//     })
	// verify sender
	frame_dig -1 // senderTxn: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"senderTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -1 // senderTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"senderTxn","field":"receiver","expected":"this.app.address"}
	assert

	// contracts/DeFundIt.algo.ts:51
	// this.funds.value += senderTxn.amount
	byte 0x66756e6473 // "funds"
	app_global_get
	frame_dig -1 // senderTxn: PayTxn
	gtxns Amount
	+
	byte 0x66756e6473 // "funds"
	swap
	app_global_put
	retsub

// SendFundToBeneficiary()void
*abi_route_SendFundToBeneficiary:
	// execute SendFundToBeneficiary()void
	callsub SendFundToBeneficiary
	int 1
	return

// SendFundToBeneficiary(): void
//
// Transfers the funds to the beneficiary address if the total funds match the funding target.
//
// @remarks
// This function verifies if the total funds in the DeFundIt application match the funding target.
// If the condition is met, it sends a payment transaction to the beneficiary address with the
// current funds amount and a note indicating the transfer.
//
// @throws Throws an assertion error if the total funds do not match the funding target.
//
// @returns {void}
SendFundToBeneficiary:
	proto 0 0

	// contracts/DeFundIt.algo.ts:67
	// assert(this.funds.value === this.fundingTarget.value, 'Funds must be equal to the funding target')
	byte 0x66756e6473 // "funds"
	app_global_get
	byte 0x66756e64696e67546172676574 // "fundingTarget"
	app_global_get
	==

	// Funds must be equal to the funding target
	assert

	// contracts/DeFundIt.algo.ts:69
	// sendPayment({
	//       receiver: this.beneficiaryAddress.value,
	//       amount: this.funds.value,
	//       note: 'DeFundIt funds sent',
	//       sender: this.app.address,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/DeFundIt.algo.ts:70
	// receiver: this.beneficiaryAddress.value
	byte 0x62656e656669636961727941646472657373 // "beneficiaryAddress"
	app_global_get
	itxn_field Receiver

	// contracts/DeFundIt.algo.ts:71
	// amount: this.funds.value
	byte 0x66756e6473 // "funds"
	app_global_get
	itxn_field Amount

	// contracts/DeFundIt.algo.ts:72
	// note: 'DeFundIt funds sent'
	byte 0x446546756e6449742066756e64732073656e74 // "DeFundIt funds sent"
	itxn_field Note

	// contracts/DeFundIt.algo.ts:73
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// getBeneficiaryAddress()address
*abi_route_getBeneficiaryAddress:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getBeneficiaryAddress()address
	callsub getBeneficiaryAddress
	concat
	log
	int 1
	return

// getBeneficiaryAddress(): Address
//
// Retrieves the beneficiary address associated with the DeFundIt application.
//
// @returns {Address} - The Algorand address of the beneficiary.
//
// @remarks
// This function returns the beneficiary address that was set during the application initialization.
// The beneficiary address is used to receive funds once the total funds match the funding target.
getBeneficiaryAddress:
	proto 0 1

	// contracts/DeFundIt.algo.ts:87
	// return this.beneficiaryAddress.value;
	byte 0x62656e656669636961727941646472657373 // "beneficiaryAddress"
	app_global_get
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
//
// Deletes the DeFundIt application from the Algorand blockchain.
//
// @remarks
// This function is intended to be called when the DeFundIt application is no longer needed.
// It verifies that the sender of the transaction is the creator of the application and then
// deletes the application from the Algorand blockchain.
//
// @throws Throws an assertion error if the sender of the transaction is not the creator of the application.
//
// @returns {void}
deleteApplication:
	proto 0 0

	// contracts/DeFundIt.algo.ts:103
	// assert(this.app.creator === this.txn.sender, 'sender must be the creator of the application')
	txna Applications 0
	app_params_get AppCreator
	pop
	txn Sender
	==

	// sender must be the creator of the application
	assert
	retsub

*create_NoOp:
	method "createApplication(address,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "sendFunding(pay)void"
	method "SendFundToBeneficiary()void"
	method "getBeneficiaryAddress()address"
	txna ApplicationArgs 0
	match *abi_route_sendFunding *abi_route_SendFundToBeneficiary *abi_route_getBeneficiaryAddress

	// this contract does not implement the given ABI method for call NoOp
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err