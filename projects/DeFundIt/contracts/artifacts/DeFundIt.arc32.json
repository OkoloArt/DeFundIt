{
  "hints": {
    "createApplication(address,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "sendFunding(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "SendFundToBeneficiary()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getBeneficiaryAddress()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "minimumFunding": {
          "type": "uint64",
          "key": "minimumFunding"
        },
        "fundingTarget": {
          "type": "uint64",
          "key": "fundingTarget"
        },
        "beneficiaryAddress": {
          "type": "bytes",
          "key": "beneficiaryAddress"
        },
        "funds": {
          "type": "uint64",
          "key": "funds"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "DeFundIt",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Initializes the DeFundIt application with the provided beneficiary address.",
        "args": [
          {
            "name": "addr",
            "type": "address",
            "desc": "The Algorand address of the beneficiary."
          },
          {
            "name": "fundingTarget",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void",
          "desc": "void"
        }
      },
      {
        "name": "sendFunding",
        "desc": "Processes a payment transaction and updates the funds in the DeFundIt application.",
        "args": [
          {
            "name": "senderTxn",
            "type": "pay",
            "desc": "The payment transaction to be processed."
          }
        ],
        "returns": {
          "type": "void",
          "desc": "void"
        }
      },
      {
        "name": "SendFundToBeneficiary",
        "desc": "Transfers the funds to the beneficiary address if the total funds match the funding target.",
        "args": [],
        "returns": {
          "type": "void",
          "desc": "void"
        }
      },
      {
        "name": "getBeneficiaryAddress",
        "desc": "Retrieves the beneficiary address associated with the DeFundIt application.",
        "args": [],
        "returns": {
          "type": "address",
          "desc": "Address - The Algorand address of the beneficiary."
        }
      },
      {
        "name": "deleteApplication",
        "desc": "Deletes the DeFundIt application from the Algorand blockchain.",
        "args": [],
        "returns": {
          "type": "void",
          "desc": "void"
        }
      }
    ]
  }
}